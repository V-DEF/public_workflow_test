name: Assign Issue to Team Member

on:
  issues:
    types: [opened]

jobs:
  assign-issue:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check issue title
      uses: actions/github-script@v6
      id: check_title
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          if (context.payload.issue.title !== 'Request access') {
            core.setOutput('continue', 'false');
            console.log(`Issue title is NOT valid, skipping "Assign issue".`);
          } else {
            core.setOutput('continue', 'true');
            console.log(`Issue title is valid, continuing "Assign issue".`);
          }

    - name: Skip job if issue title is not valid
      if: steps.check_title.outputs.continue == 'false'
      run: echo "Skipping job because issue title is NOT valid."
      continue-on-error: true

    - name: Assign issue to v-admin team member
      if: steps.check_title.outputs.continue == 'true'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.READ_WRITE }}
        script: |
          const issueNumber = context.issue.number;
          const teamSlug = 'v-admins';
          const org = context.repo.owner;

          // Log issueNumber
          console.log('issueNumber:', issueNumber);

          // Get the list of team members
          const { data: team } = await github.rest.teams.getByName({
            org,
            team_slug: teamSlug,
          });

          // Log List of team members
          // console.log('team infos:', team);

          const { data: teamMembers } = await github.rest.teams.listMembersInOrg({
            org,
            team_slug: team.slug,
          });

          // Log the team members
          // console.log('Team Members:', teamMembers);

          if (teamMembers.length === 0) {
            throw new Error(`No members found in the team ${teamSlug }`);
          }

          // Get the logins of all team members
          const assignees = teamMembers.map(member => member.login);

          // Log assignees
          console.log('assignees:', assignees);

          // Log context
          // console.log('context:', context);

          // Log owner
          console.log('OWNER:', org);

          // Log repo
          console.log('REPO:', context.repo.repo);

          // Assign all team members to the issue
          await github.rest.issues.addAssignees({
            owner: org,
            repo: context.repo.repo,
            issue_number: issueNumber,
            assignees: assignees,
          });

          console.log(`Assigned issue #${issueNumber} to ${assignees.join(', ')}`);